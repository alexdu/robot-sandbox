def setup_environment():  
    for i in range(0,3):
        b1 = boxes[i]
        b2 = boxes[i+6]

        x = 0.3
        y = 0.3
        z = 10E-3 + i * 20E-3

        setSizePosRot(b1, (100E-3, 30E-3, 15E-3), (x, y, z), mat3(1).toList())
        setSizePosRot(b2, (100E-3, 30E-3, 15E-3), (x,-y, z), mat3(1).toList())

        b1.setMaterial(matRedBox)
        b2.setMaterial(matYellowBox)


    b = boxes[3]
    setSizePosRot(b, (100 * 1E-3,200 * 1E-3,3E-3), (500E-3, 0, 1.5E-3), mat3(1).toList())
    b.setMaterial(matPallet)
    odeSim.createBodyManipulator(b).odebody.setKinematic()

    SIG(1033,1034,1035,1036)
    SIGNAL(-49,-50,-51,-52)


reset

setup_environment()
h = 15
l_storage = TRANS(300, 300, 100, 0, 180, 90)
nl_storage = TRANS(300,-300, 100, 0, 180, 90)
pal = TRANS(500,   0, 103,       0,  180, 0)

print
print """

Fiecare stiva contine cate 3 piese.
Grosimea unei piese: h = 15

Puncte robot:
=============
 l_storage, nl_storage:  la baza celor doua stive
 pal: baza stivei de pe paleta

Semnale:
=======
PLC -> Robot:
 * 1033 - comanda inceperea sarcinii pentru robot
       - confirma validitatea semnalelor 1034 ... 1036
 * 1034 - determina tipul de piese dorit (galbene sau rosii)
 * 1035, 1036 - numaul de piese dorit, codificat pe 2 biti (1036 = LSB)

Robot -> PLC:
 * 49 - anunta incheierea sarcinii robotului 
      - confirm validitatea semnalelor 50 ... 52
 * 50, 51, 52 - numaul de secunde necesar executarii sarcinii (0...7), 
   reprezentat ca intreg codificat pe 3 biti (52 = LSB)
"""

