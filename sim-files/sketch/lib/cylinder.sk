def cylinder_generatrix put{rotate(90,[1,0,0]) then translate([0,0,-0.5])}
{
    repeat{segments, rotate(360/segments,[0,1,0])}
        line[style,e_xtrastyle,nofill](1,0)(1,1)
}

def cylinder_interior
<generatrix>
{
    put{rotate(90,[1,0,0]) then translate([0,0,-0.5]) then rotate(180/20, [0,0,1])}
    {
        def n 20   
        sweep[style,e_xtrastyle,noline]{n<>, rotate(360/n,[0,1,0])}
            line[style,e_xtrastyle,noline](1,0)(1,1)
    }
    put{scale(1/interior_scale)}{cylinder_generatrix}
}
<>
{
    put{rotate(90,[1,0,0]) then translate([0,0,-0.5])}
    {
        def n 20   
        sweep[style,e_xtrastyle,noline]{n<>, rotate(360/n,[0,1,0])}
            line[style,e_xtrastyle,noline](1,0)(1,1)
    }
}

def cylinder_circles
{
    def n 50
    sweep [style,e_xtrastyle] { 50, rotate(360 / 50, [0,0,1]) }
            (1,0,0.5)
    sweep [style,e_xtrastyle] { 50, rotate(360 / 50, [0,0,1]) }
            (1,0,-0.5)
}

def cylinder_nolimb
<wireframe>
{
    put {scale(interior_scale)}{cylinder_interior}
    {cylinder_circles}    
    {cylinder_generatrix}
}
<>
{
    put {scale(interior_scale)}{cylinder_interior}
    {cylinder_circles}    
}


def cylinder
<limb>
{
    {cylinder_nolimb}
    special|\begin{scope}\SetCoordOXYZ#1#2#3#4\DrawCylLimbEdges#1#2#3\end{scope}|[lay=in](o)(x)(y)(z)
}
<varlimb>
{
    {cylinder_nolimb}
    put{rotate(limb_angle, [Z]) * translate([0,0,-0.5]) * rotate(90,[X])}
    {
        repeat{2, rotate(180, [Y])}
            line[style,e_xtrastyle,nofill](1,0)(1,1)
    }

    special|
    {
        \CalcCylLimbAngle#1#2#3 
        \edef\alpha{\pgfmathresult}
        \newcount{\alphar}
        \pgfmathsetcount{\alphar}{round(\alpha) + 360 * (\alpha < 0)}
        \message{^^Jsketch-lib cylinder: def limb_angle \the\alphar ^^J^^J}
    }
    |[lay=in](o)(x)(y)(z)

}
<>
    {cylinder_nolimb}



